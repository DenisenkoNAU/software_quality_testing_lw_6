name: CI Pipeline

on:
  pull_request:
    branches:
      - 'develop'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Крок для перевірки репозиторію, тобто завантаження коду з GitHub
      - name: Checkout repository
        uses: actions/checkout@v3

      # Встановлення Node.js для виконання подальших кроків
      # зокрема запуску тестів та лінтингу
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Встановлення залежностей проекту, зазначених у файлі package.json
      - name: Install dependencies
        run: npm install

      # Виконання лінтингу коду за допомогою ESLint через Reviewdog
      # та надання зворотного зв'язку у вигляді коментарів до PR
      - name: Annotate code via Reviewdog (ESLint)
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          level: info

      # Запуск лінтера для перевірки коду на наявність помилок.
      # Якщо є помилки, pipeline зупиняється
      - name: Lint code and fail if issues found
        run: npm run lint

      # Запуск тестів за допомогою Jest для перевірки працездатності коду
      - name: Run tests with Jest
        run: npm test

  analysis:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Повторне завантаження репозиторію для кроків аналізу
      - name: Checkout repository
        uses: actions/checkout@v3

      # Перевірка, чи є схвалені рев'ю на PR.
      # Якщо немає, pipeline не буде продовжено
      - name: Check for review approvals
        uses: actions/github-script@v6
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.data.number
            });
            const approved = reviews.data.filter(r => r.state === 'APPROVED');
            if (approved.length === 0) {
              core.setFailed('No approved code reviews.');
            }

      # Виконання аналізу коду за допомогою інструмента Cloc
      # для підрахунку кількості рядків коду, коментарів тощо.
      # Результати зберігаються у файл cloc_report.txt
      - name: Running Cloc analysis
        run: |
          sudo apt-get install -y cloc
          cloc src/ > cloc_report.txt
          cat cloc_report.txt

      # Виконання аналізу коду за допомогою SonarQube для оцінки якості коду
      - name: Running SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.1.0.4889-linux-x64.zip
          unzip sonar-scanner-cli-7.1.0.4889-linux-x64.zip
          export PATH=$PATH:$(pwd)/sonar-scanner-7.1.0.4889-linux-x64/bin
          sonar-scanner -Dsonar.token=$SONAR_TOKEN

      # Перевірка змін, які були внесені в гілку develop,
      # з виведенням 20 останніх комітів для огляду
      - name: Checking out changes in the develop branch
        run: |
          git fetch origin develop
          git log origin/develop --oneline --graph -n 20 > develop_changes.txt
          cat develop_changes.txt

      # Завантаження звіту з Cloc як артефакт для збереження результатів
      - name: Save cloc_report
        uses: actions/upload-artifact@v4
        with:
          name: cloc_report
          path: cloc_report.txt

      # Завантаження звіту з комітами з гілки develop як артефакт для збереження результатів
      - name: Save develop_changes
        uses: actions/upload-artifact@v4
        with:
          name: develop_changes
          path: develop_changes.txt
